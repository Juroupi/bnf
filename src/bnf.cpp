#include <iostream>
#include <cstdlib>
#include <string>
#include <chrono>

#include "bnf/grammar.h"

using namespace std;

void printCardinality(NonTerminal& nonTerminal, unsigned int n) {

    auto start = std::chrono::high_resolution_clock::now();
    big_int card = nonTerminal.getCardinality(n);
    std::chrono::duration<double> time = std::chrono::high_resolution_clock::now() - start;

    cout << "cardinality(\"" << nonTerminal.getValue(true) << "\", " << n << ") = " << card << endl;

    printf("time = %fs\n", time.count());
}

void printExists(NonTerminal& nonTerminal, unsigned int n) {

    auto start = std::chrono::high_resolution_clock::now();
    bool exists = nonTerminal.getExists(n);
    std::chrono::duration<double> time = std::chrono::high_resolution_clock::now() - start;

    cout << "exists(\"" << nonTerminal.getValue(true) << "\", " << n << ") = " << (exists ? "true" : "false") << endl;

    printf("time = %fs\n", time.count());
}

void printElements(NonTerminal& nonTerminal, unsigned int n) {

    auto start = std::chrono::high_resolution_clock::now();
    set<string> elements = nonTerminal.getElements(n);
    std::chrono::duration<double> time = std::chrono::high_resolution_clock::now() - start;

    cout << "elements(\"" << nonTerminal.getValue(true) << "\", " << n << ") = [";
    for (const string& element : elements) {
        if (&element != &(*elements.begin())) cout << ",";
        cout << " \"" << element << "\"";
    }
    cout << " ]" << endl;

    printf("time = %fs\n", time.count());
}

void printElement(NonTerminal& nonTerminal, unsigned int n, big_int&& id) {

    cout << "element(\"" << nonTerminal.getValue(true) << "\", " << n << ", " << id << ") = ";

    auto start = std::chrono::high_resolution_clock::now();
    string element = nonTerminal.getElement(n, id);
    std::chrono::duration<double> time = std::chrono::high_resolution_clock::now() - start;

    cout << "\"" << element << "\"" << endl;

    printf("time = %fs\n", time.count());
}

void printURandom(NonTerminal& nonTerminal, unsigned int n) {

    auto start = std::chrono::high_resolution_clock::now();
    string random = nonTerminal.getURandomElement(n);
    std::chrono::duration<double> time = std::chrono::high_resolution_clock::now() - start;

    cout << "random(\"" << nonTerminal.getValue(true) << "\", " << n << ") = \"" << random << "\"" << endl;
    
    printf("time = %fs\n", time.count());
}

void printNURandom(NonTerminal& nonTerminal, unsigned int n) {

    auto start = std::chrono::high_resolution_clock::now();
    string random = nonTerminal.getNURandomElement(n);
    std::chrono::duration<double> time = std::chrono::high_resolution_clock::now() - start;

    cout << "nurandom(\"" << nonTerminal.getValue(true) << "\", " << n << ") = \"" << random << "\"" << endl;
    
    printf("time = %fs\n", time.count());
}

void printRandomOfHeight(NonTerminal& nonTerminal, unsigned int n) {

    auto start = std::chrono::high_resolution_clock::now();
    string random = nonTerminal.getRandomElementOfHeight(n);
    std::chrono::duration<double> time = std::chrono::high_resolution_clock::now() - start;

    cout << "randomOfHeight(\"" << nonTerminal.getValue(true) << "\", " << n << ") = \"" << random << "\"" << endl;
    
    printf("time = %fs\n", time.count());
}

void printUCount(NonTerminal& nonTerminal, unsigned int n, unsigned int total) {

    map<string, unsigned int> count;

    for (unsigned int i = 0; i < total; i++) {
        string random = nonTerminal.getURandomElement(n);
        count[random]++;
        random.clear();
    }

    cout << "ucount(\"" << nonTerminal.getValue(true) << "\", " << n << ") = [";

    for (auto& it : count) {
        if (&it != &(*count.begin())) cout << ",";
        printf("\n    \"%s\" : %u (%g%%)", it.first.data(), it.second, it.second / (double)total * 100);
    }

    cout << endl << "]" << endl;
}

void printNUCount(NonTerminal& nonTerminal, unsigned int n, unsigned int total) {

    map<string, unsigned int> count;

    for (unsigned int i = 0; i < total; i++) {
        string random = nonTerminal.getNURandomElement(n);
        count[random]++;
        random.clear();
    }

    cout << "nucount(\"" << nonTerminal.getValue(true) << "\", " << n << ") = [";

    for (auto& it : count) {
        if (&it != &(*count.begin())) cout << ",";
        printf("\n    \"%s\" : %u (%g%%)", it.first.data(), it.second, it.second / (double)total * 100);
    }

    cout << endl << "]" << endl;
}

void printUsage(char* argv[]) {
    cout << "usage: " << argv[0] << " <file> <non-terminal> <command>" << endl;
    cout << "commands: " << endl;
    cout << "    cardinality <n>  -- The number of elements of size n that can be generated by the given non-terminal" << endl;
    cout << "    exists <n>       -- Test if at least one element of size n can be generated by the given non-terminal" << endl;
    cout << "    elements <n>     -- All the elements of size n that can be generated by the given non-terminal" << endl;
    cout << "    element <n> <id> -- The id-th element of size n that can be generated by the given non-terminal" << endl;
    cout << "    urandom <n>      -- A random element (uniform) of size n that can be generated by the given non-terminal" << endl;
    cout << "    nurandom <n>     -- A random element (non uniform) of size n that can be generated by the given non-terminal" << endl;
    cout << "    randomh <n>      -- A random element with height <= n that can be generated by the given non-terminal" << endl;
    cout << "    ucount <n> <r>   -- For each element of size n that can be generated by the given non-terminal, the number of times it was generated for a total of r random elements (uniform)" << endl;
    cout << "    nucount <n> <r>  -- For each element of size n that can be generated by the given non-terminal, the number of times it was generated for a total of r random elements (non uniform)" << endl;
    cout << "example: " << argv[0] << " data/par.bnf W cardinality 6" << endl;
}

string getStringArg(int argc, char* argv[], int n) {

    if (n >= argc) {
        printUsage(argv);
        exit(1);
    }

    return argv[n];
}

unsigned int getUIntArg(int argc, char* argv[], int n) {

    if (n >= argc) {
        printUsage(argv);
        exit(1);
    }

    char* endptr;
    unsigned int val = (unsigned int)strtoul(argv[n], &endptr, 10);
    
    if (*endptr != '\0') {
        printUsage(argv);
        exit(1);
    }

    return val;
}

int main(int argc, char* argv[]) {

    Grammar g(getStringArg(argc, argv, 1));
    NonTerminal& nonTerminal = g[getStringArg(argc, argv, 2)];

    string command = getStringArg(argc, argv, 3);

    if (command == "cardinality") {
        printCardinality(nonTerminal, getUIntArg(argc, argv, 4));
    }

    else if (command == "exists") {
        printExists(nonTerminal, getUIntArg(argc, argv, 4));
    }
    
    else if (command == "elements") {
        printElements(nonTerminal, getUIntArg(argc, argv, 4));
    }
    
    else if (command == "element") {
        printElement(nonTerminal, getUIntArg(argc, argv, 4), getUIntArg(argc, argv, 5));
    }
    
    else if (command == "urandom") {
        printURandom(nonTerminal, getUIntArg(argc, argv, 4));
    }
    
    else if (command == "nurandom") {
        printNURandom(nonTerminal, getUIntArg(argc, argv, 4));
    }
    
    else if (command == "randomh") {
        printRandomOfHeight(nonTerminal, getUIntArg(argc, argv, 4));
    }
    
    else if (command == "ucount") {
        printUCount(nonTerminal, getUIntArg(argc, argv, 4), getUIntArg(argc, argv, 5));
    }
    
    else if (command == "nucount") {
        printNUCount(nonTerminal, getUIntArg(argc, argv, 4), getUIntArg(argc, argv, 5));
    }
    
    else {
        printUsage(argv);
        return 1;
    }

    return 0;
}